const { BloodInventory, Donor, BloodRequest } = require("../models");
const { sequelize } = require("../models"); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng


// üìä 1Ô∏è‚É£ B√°o c√°o t·ªïng s·ªë l∆∞·ª£ng m√°u theo nh√≥m m√°u
exports.getBloodReport = async(req, res) => {
    try {
        const report = await BloodInventory.findAll({
            attributes: [
                "blood_type", [sequelize.fn("SUM", sequelize.col("quantity")), "total_quantity"]
            ],
            group: ["blood_type"]
        });

        res.status(200).json({ success: true, data: report });
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√°o c√°o m√°u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// üè• 2Ô∏è‚É£ B√°o c√°o t·ªïng s·ªë l·∫ßn hi·∫øn m√°u theo b·ªánh vi·ªán
exports.getDonationReport = async(req, res) => {
    try {
        const report = await Donor.findAll({
            attributes: [
                "hospital", [sequelize.fn("COUNT", sequelize.col("id")), "total_donations"]
            ],
            group: ["hospital"]
        });

        res.status(200).json({ success: true, data: report });
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√°o c√°o hi·∫øn m√°u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// üî• 3Ô∏è‚É£ B√°o c√°o s·ªë l∆∞·ª£ng y√™u c·∫ßu m√°u ƒë√£ x·ª≠ l√Ω & b·ªã t·ª´ ch·ªëi
exports.getBloodRequestReport = async(req, res) => {
    try {
        const report = await BloodRequest.findAll({
            attributes: [
                "status", [sequelize.fn("COUNT", sequelize.col("id")), "total_requests"]
            ],
            group: ["status"]
        });

        res.status(200).json({ success: true, data: report });
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√°o c√°o y√™u c·∫ßu m√°u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// ü©∏ 4Ô∏è‚É£ B√°o c√°o s·ªë l∆∞·ª£ng ng∆∞·ªùi hi·∫øn m√°u theo nh√≥m m√°u
exports.getDonorReport = async(req, res) => {
    try {
        const report = await Donor.findAll({
            attributes: [
                "blood_type", [sequelize.fn("COUNT", sequelize.col("id")), "total_donors"]
            ],
            group: ["blood_type"]
        });

        res.status(200).json({ success: true, data: report });
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√°o c√°o ng∆∞·ªùi hi·∫øn m√°u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// üìÖ 5Ô∏è‚É£ B√°o c√°o t√¨nh tr·∫°ng hi·∫øn m√°u theo ng√†y/th√°ng/nƒÉm
exports.getDonationTrends = async(req, res) => {
    try {
        const { timeframe } = req.query; // timeframe: "daily", "monthly", "yearly"
        let groupByFormat = "";

        if (timeframe === "daily") {
            groupByFormat = sequelize.fn("DATE", sequelize.col("last_donation"));
        } else if (timeframe === "monthly") {
            groupByFormat = sequelize.fn("DATE_FORMAT", sequelize.col("last_donation"), "%Y-%m");
        } else if (timeframe === "yearly") {
            groupByFormat = sequelize.fn("YEAR", sequelize.col("last_donation"));
        } else {
            return res.status(400).json({ message: "Tham s·ªë timeframe kh√¥ng h·ª£p l·ªá!" });
        }

        const report = await Donor.findAll({
            attributes: [
                [groupByFormat, "timeframe"],
                [sequelize.fn("COUNT", sequelize.col("id")), "total_donations"]
            ],
            group: ["timeframe"],
            order: [
                ["timeframe", "ASC"]
            ]
        });

        res.status(200).json({ success: true, data: report });
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√°o c√°o xu h∆∞·ªõng hi·∫øn m√°u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};